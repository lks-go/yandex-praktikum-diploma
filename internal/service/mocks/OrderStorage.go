// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/lks-go/yandex-praktikum-diploma/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// OrderStorage is an autogenerated mock type for the OrderStorage type
type OrderStorage struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: ctx, o
func (_m *OrderStorage) AddOrder(ctx context.Context, o *service.Order) (string, error) {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.Order) (string, error)); ok {
		return rf(ctx, o)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.Order) string); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.Order) error); ok {
		r1 = rf(ctx, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderByNumber provides a mock function with given fields: ctx, orderNumber
func (_m *OrderStorage) OrderByNumber(ctx context.Context, orderNumber string) (*service.Order, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for OrderByNumber")
	}

	var r0 *service.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.Order, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.Order); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, o
func (_m *OrderStorage) UpdateOrder(ctx context.Context, o *service.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersOrders provides a mock function with given fields: ctx, userID
func (_m *OrderStorage) UsersOrders(ctx context.Context, userID string) ([]service.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UsersOrders")
	}

	var r0 []service.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]service.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []service.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderStorage creates a new instance of OrderStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderStorage {
	mock := &OrderStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
