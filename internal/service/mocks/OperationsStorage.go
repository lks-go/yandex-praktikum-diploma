// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/lks-go/yandex-praktikum-diploma/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// OperationsStorage is an autogenerated mock type for the OperationsStorage type
type OperationsStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, o
func (_m *OperationsStorage) Add(ctx context.Context, o *service.Operation) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.Operation) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Current provides a mock function with given fields: ctx, userID
func (_m *OperationsStorage) Current(ctx context.Context, userID string) (float32, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Current")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float32, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float32); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdrawals provides a mock function with given fields: ctx, userID
func (_m *OperationsStorage) Withdrawals(ctx context.Context, userID string) ([]service.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Withdrawals")
	}

	var r0 []service.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]service.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []service.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdrawn provides a mock function with given fields: ctx, userID
func (_m *OperationsStorage) Withdrawn(ctx context.Context, userID string) (float32, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Withdrawn")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float32, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float32); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOperationsStorage creates a new instance of OperationsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationsStorage {
	mock := &OperationsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
