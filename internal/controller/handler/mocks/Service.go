// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/lks-go/yandex-praktikum-diploma/internal/service"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AuthUser provides a mock function with given fields: ctx, login, password
func (_m *Service) AuthUser(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderList provides a mock function with given fields: ctx, login
func (_m *Service) OrderList(ctx context.Context, login string) ([]service.Order, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for OrderList")
	}

	var r0 []service.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]service.Order, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []service.Order); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, login, password
func (_m *Service) RegisterUser(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOrder provides a mock function with given fields: ctx, login, orderNumber
func (_m *Service) SaveOrder(ctx context.Context, login string, orderNumber string) error {
	ret := _m.Called(ctx, login, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, orderNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserBalance provides a mock function with given fields: ctx, login
func (_m *Service) UserBalance(ctx context.Context, login string) (*service.UserBalance, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for UserBalance")
	}

	var r0 *service.UserBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.UserBalance, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.UserBalance); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawBonuses provides a mock function with given fields: ctx, login, orderNumber, amount
func (_m *Service) WithdrawBonuses(ctx context.Context, login string, orderNumber string, amount float32) error {
	ret := _m.Called(ctx, login, orderNumber, amount)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawBonuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float32) error); ok {
		r0 = rf(ctx, login, orderNumber, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdrawals provides a mock function with given fields: ctx, login
func (_m *Service) Withdrawals(ctx context.Context, login string) ([]service.Withdrawal, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for Withdrawals")
	}

	var r0 []service.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]service.Withdrawal, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []service.Withdrawal); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
